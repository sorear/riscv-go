// Copyright 2016 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Optimizations TODO:
// * Somehow track when values are already zero/signed-extended, avoid re-extending.
// * Use SLTI and SLTIU for comparisons to constants, instead of SLT/SLTU with constants in registers
// * Find a more efficient way to do zero/sign extension than left+right shift.
//   There are many other options (store then load-extend, LUI+ANDI for zero extend, special case 32->64, ...),
//   but left+right shift is simple and uniform, and we don't have real hardware to do perf testing on anyway.
// * Use the zero register instead of moving 0 into a register.
// * Add rules to avoid generating a temp bool value for (If (SLT[U] ...) ...).
// * Optimize left and right shift by simplifying SLTIU, Neg, and ADD for
//   constants.
// * Arrange for non-trivial Zero and Move lowerings to use aligned loads and stores.
// * Eliminate zero immediate shifts, adds, etc.
// * Use a Duff's device for some moves and zeros.

// Lowering arithmetic
(Add64 x y) -> (ADD x y)
(AddPtr x y) -> (ADD x y)
(Add32 x y) -> (ADD x y)
(Add16 x y) -> (ADD x y)
(Add8 x y) -> (ADD x y)
(Add32F x y) -> (FADDS x y)
(Add64F x y) -> (FADDD x y)

(Sub64 x y) -> (SUB x y)
(SubPtr x y) -> (SUB x y)
(Sub32 x y) -> (SUB x y)
(Sub16 x y) -> (SUB x y)
(Sub8 x y) -> (SUB x y)
(Sub32F x y) -> (FSUBS x y)
(Sub64F x y) -> (FSUBD x y)

(Mul64 x y) -> (MUL  x y)
(Mul32 x y) -> (MULW x y)
(Mul16 x y) -> (MULW (SignExt16to32 x) (SignExt16to32 y))
(Mul8 x y)  -> (MULW (SignExt8to32 x)  (SignExt8to32 y))
(Mul32F x y) -> (FMULS x y)
(Mul64F x y) -> (FMULD x y)

(Div32F x y) -> (FDIVS x y)
(Div64F x y) -> (FDIVD x y)

(Div64 x y)  -> (DIV   x y)
(Div64u x y) -> (DIVU  x y)
(Div32 x y)  -> (DIVW  x y)
(Div32u x y) -> (DIVUW x y)
(Div16 x y)  -> (DIVW  (SignExt16to32 x) (SignExt16to32 y))
(Div16u x y) -> (DIVUW (ZeroExt16to32 x) (ZeroExt16to32 y))
(Div8 x y)   -> (DIVW  (SignExt8to32 x)  (SignExt8to32 y))
(Div8u x y)  -> (DIVUW (ZeroExt8to32 x)  (ZeroExt8to32 y))

(Hmul64 x y)  -> (MULH  x y)
(Hmul64u x y) -> (MULHU x y)
(Hmul32 x y)  -> (SRAI [32] (MUL  (SignExt32to64 x) (SignExt32to64 y)))
(Hmul32u x y) -> (SRLI [32] (MUL  (ZeroExt32to64 x) (ZeroExt32to64 y)))
(Hmul16 x y)  -> (SRAI [16] (MULW (SignExt16to32 x) (SignExt16to32 y)))
(Hmul16u x y) -> (SRLI [16] (MULW (ZeroExt16to32 x) (ZeroExt16to32 y)))
(Hmul8 x y)   -> (SRAI [8]  (MULW (SignExt8to32 x)  (SignExt8to32 y)))
(Hmul8u x y)  -> (SRLI [8]  (MULW (ZeroExt8to32 x)  (ZeroExt8to32 y)))

// (x + y) / 2 -> (x / 2) + (y / 2) + (x & y & 1)
(Avg64u <t> x y) -> (ADD (ADD <t> (SRLI <t> [1] x) (SRLI <t> [1] y)) (ANDI <t> [1] (AND <t> x y)))

(Mod64 x y)  -> (REM   x y)
(Mod64u x y) -> (REMU  x y)
(Mod32 x y)  -> (REMW  x y)
(Mod32u x y) -> (REMUW x y)
(Mod16 x y)  -> (REMW  (SignExt16to32 x) (SignExt16to32 y))
(Mod16u x y) -> (REMUW (ZeroExt16to32 x) (ZeroExt16to32 y))
(Mod8 x y)   -> (REMW  (SignExt8to32 x)  (SignExt8to32 y))
(Mod8u x y)  -> (REMUW (ZeroExt8to32 x)  (ZeroExt8to32 y))

(And64 x y) -> (AND x y)
(And32 x y) -> (AND x y)
(And16 x y) -> (AND x y)
(And8  x y) -> (AND x y)

(Or64 x y) -> (OR x y)
(Or32 x y) -> (OR x y)
(Or16 x y) -> (OR x y)
(Or8  x y) -> (OR x y)

(Xor64 x y) -> (XOR x y)
(Xor32 x y) -> (XOR x y)
(Xor16 x y) -> (XOR x y)
(Xor8  x y) -> (XOR x y)

(Neg64 x) -> (NEG x)
(Neg32 x) -> (NEG x)
(Neg16 x) -> (NEG x)
(Neg8  x) -> (NEG x)
(Neg32F x) -> (FNEGS x)
(Neg64F x) -> (FNEGD x)

(Com64 x) -> (XORI [int64(-1)] x)
(Com32 x) -> (XORI [int64(-1)] x)
(Com16 x) -> (XORI [int64(-1)] x)
(Com8  x) -> (XORI [int64(-1)] x)

(Sqrt x) -> (FSQRTD x)

// Zero and sign extension
// Shift left until the bits we want are at the top of the register.
// Then logical/arithmetic shift right for zero/sign extend.
// We always extend to 64 bits; there's no reason not to,
// and optimization rules can then collapse some extensions.

// the intermediate needs to be 64-bits wide (unless we use *W-variants) or high bits could get cut off
(SignExt8to16  x) -> (SRAI [56] (SLLI <config.fe.TypeInt64()> [56] x))
(SignExt8to32  x) -> (SRAI [56] (SLLI <config.fe.TypeInt64()> [56] x))
(SignExt8to64  x) -> (SRAI [56] (SLLI <config.fe.TypeInt64()> [56] x))
(SignExt16to32 x) -> (SRAI [48] (SLLI <config.fe.TypeInt64()> [48] x))
(SignExt16to64 x) -> (SRAI [48] (SLLI <config.fe.TypeInt64()> [48] x))
(SignExt32to64 x) -> (ADDIW [0] x)

(ZeroExt8to16  x) -> (ANDI [255] x)
(ZeroExt8to32  x) -> (ANDI [255] x)
(ZeroExt8to64  x) -> (ANDI [255] x)
(ZeroExt16to32 x) -> (SRLI [48] (SLLI <config.fe.TypeUInt64()> [48] x))
(ZeroExt16to64 x) -> (SRLI [48] (SLLI <config.fe.TypeUInt64()> [48] x))
(ZeroExt32to64 x) -> (SRLI [32] (SLLI <config.fe.TypeUInt64()> [32] x))

(Cvt32to32F x) -> (FCVTSW x)
(Cvt32to64F x) -> (FCVTDW x)
(Cvt64to32F x) -> (FCVTSL x)
(Cvt64to64F x) -> (FCVTDL x)

(Cvt32Fto32 x) -> (FCVTWS x)
(Cvt32Fto64 x) -> (FCVTLS x)
(Cvt64Fto32 x) -> (FCVTWD x)
(Cvt64Fto64 x) -> (FCVTLD x)

(Cvt32Fto64F x) -> (FCVTDS x)
(Cvt64Fto32F x) -> (FCVTSD x)

// From genericOps.go:
// "0 if arg0 == 0, -1 if arg0 > 0, undef if arg0<0"
//
// We compute -(arg0 != 0)

(Slicemask <t> x) -> (ADDI [-1] (SEQZ <t> x))

// Truncations
// We ignore the unused high parts of registers, so truncates are just copies.
(Trunc16to8  x) -> x
(Trunc32to8  x) -> x
(Trunc32to16 x) -> x
(Trunc64to8  x) -> x
(Trunc64to16 x) -> x
(Trunc64to32 x) -> x

// Shifts

// constant shifts
(Lsh64x64  x (MOVDconst [c])) && uint64(c) < 64 -> (SLLI x [c])
(Rsh64x64  x (MOVDconst [c])) && uint64(c) < 64 -> (SRAI x [c])
(Rsh64Ux64 x (MOVDconst [c])) && uint64(c) < 64 -> (SRLI x [c])
(Lsh32x64  x (MOVDconst [c])) && uint64(c) < 32 -> (SLLI x [c])
(Rsh32x64  x (MOVDconst [c])) && uint64(c) < 32 -> (SRAI (SignExt32to64 x) [c])
(Rsh32Ux64 x (MOVDconst [c])) && uint64(c) < 32 -> (SRLI (ZeroExt32to64 x) [c])
(Lsh16x64  x (MOVDconst [c])) && uint64(c) < 16 -> (SLLI x [c])
(Rsh16x64  x (MOVDconst [c])) && uint64(c) < 16 -> (SRAI (SignExt16to64 x) [c])
(Rsh16Ux64 x (MOVDconst [c])) && uint64(c) < 16 -> (SRLI (ZeroExt16to64 x) [c])
(Lsh8x64   x (MOVDconst [c])) && uint64(c) < 8  -> (SLLI x [c])
(Rsh8x64   x (MOVDconst [c])) && uint64(c) < 8  -> (SRAI (SignExt8to64  x) [c])
(Rsh8Ux64  x (MOVDconst [c])) && uint64(c) < 8  -> (SRLI (ZeroExt8to64  x) [c])

// SLL only considers the bottom 6 bits of y. If y > 64, the result should
// always be 0.
//
// Breaking down the operation:
//
// (SLL x y) generates x << (y & 63).
//
// If y < 64, this is the value we want. Otherwise, we want zero.
//
// So, we AND with -1 * uint64(y < 64), which is 0xfffff... if y < 64 and 0 otherwise.
(Lsh8x8   <t> x y) -> (AND (SLL <t> x y) (Neg8  <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Lsh8x16  <t> x y) -> (AND (SLL <t> x y) (Neg8  <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Lsh8x32  <t> x y) -> (AND (SLL <t> x y) (Neg8  <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Lsh8x64  <t> x y) -> (AND (SLL <t> x y) (Neg8  <t> (SLTIU <t> [64] y)))
(Lsh16x8  <t> x y) -> (AND (SLL <t> x y) (Neg16 <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Lsh16x16 <t> x y) -> (AND (SLL <t> x y) (Neg16 <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Lsh16x32 <t> x y) -> (AND (SLL <t> x y) (Neg16 <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Lsh16x64 <t> x y) -> (AND (SLL <t> x y) (Neg16 <t> (SLTIU <t> [64] y)))
(Lsh32x8  <t> x y) -> (AND (SLL <t> x y) (Neg32 <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Lsh32x16 <t> x y) -> (AND (SLL <t> x y) (Neg32 <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Lsh32x32 <t> x y) -> (AND (SLL <t> x y) (Neg32 <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Lsh32x64 <t> x y) -> (AND (SLL <t> x y) (Neg32 <t> (SLTIU <t> [64] y)))
(Lsh64x8  <t> x y) -> (AND (SLL <t> x y) (Neg64 <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Lsh64x16 <t> x y) -> (AND (SLL <t> x y) (Neg64 <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Lsh64x32 <t> x y) -> (AND (SLL <t> x y) (Neg64 <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Lsh64x64 <t> x y) -> (AND (SLL <t> x y) (Neg64 <t> (SLTIU <t> [64] y)))

// SRL only considers the bottom 6 bits of y. If y > 64, the result should
// always be 0. See Lsh above for a detailed description.
(Rsh8Ux8   <t> x y) -> (AND (SRL <t> (ZeroExt8to64  x) y) (Neg8  <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Rsh8Ux16  <t> x y) -> (AND (SRL <t> (ZeroExt8to64  x) y) (Neg8  <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Rsh8Ux32  <t> x y) -> (AND (SRL <t> (ZeroExt8to64  x) y) (Neg8  <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Rsh8Ux64  <t> x y) -> (AND (SRL <t> (ZeroExt8to64  x) y) (Neg8  <t> (SLTIU <t> [64] y)))
(Rsh16Ux8  <t> x y) -> (AND (SRL <t> (ZeroExt16to64 x) y) (Neg16 <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Rsh16Ux16 <t> x y) -> (AND (SRL <t> (ZeroExt16to64 x) y) (Neg16 <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Rsh16Ux32 <t> x y) -> (AND (SRL <t> (ZeroExt16to64 x) y) (Neg16 <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Rsh16Ux64 <t> x y) -> (AND (SRL <t> (ZeroExt16to64 x) y) (Neg16 <t> (SLTIU <t> [64] y)))
(Rsh32Ux8  <t> x y) -> (AND (SRL <t> (ZeroExt32to64 x) y) (Neg32 <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Rsh32Ux16 <t> x y) -> (AND (SRL <t> (ZeroExt32to64 x) y) (Neg32 <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Rsh32Ux32 <t> x y) -> (AND (SRL <t> (ZeroExt32to64 x) y) (Neg32 <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Rsh32Ux64 <t> x y) -> (AND (SRL <t> (ZeroExt32to64 x) y) (Neg32 <t> (SLTIU <t> [64] y)))
(Rsh64Ux8  <t> x y) -> (AND (SRL <t> x                 y) (Neg64 <t> (SLTIU <t> [64] (ZeroExt8to64  y))))
(Rsh64Ux16 <t> x y) -> (AND (SRL <t> x                 y) (Neg64 <t> (SLTIU <t> [64] (ZeroExt16to64 y))))
(Rsh64Ux32 <t> x y) -> (AND (SRL <t> x                 y) (Neg64 <t> (SLTIU <t> [64] (ZeroExt32to64 y))))
(Rsh64Ux64 <t> x y) -> (AND (SRL <t> x                 y) (Neg64 <t> (SLTIU <t> [64] y)))

// SRA only considers the bottom 6 bits of y. If y > 64, the result should
// be either 0 or -1 based on the sign bit.
//
// We implement this by performing the max shift (-1) if y >= 64.
//
// We OR (uint64(y < 64) - 1) into y before passing it to SRA. This leaves
// us with -1 (0xffff...) if y >= 64.
//
// We don't need to sign-extend the OR result, as it will be at minimum 8 bits,
// more than the 6 bits SRA cares about.
(Rsh8x8   <t> x y) -> (SRA <t> (SignExt8to64  x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt8to64  y)))))
(Rsh8x16  <t> x y) -> (SRA <t> (SignExt8to64  x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt16to64 y)))))
(Rsh8x32  <t> x y) -> (SRA <t> (SignExt8to64  x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt32to64 y)))))
(Rsh8x64  <t> x y) -> (SRA <t> (SignExt8to64  x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] y))))
(Rsh16x8  <t> x y) -> (SRA <t> (SignExt16to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt8to64  y)))))
(Rsh16x16 <t> x y) -> (SRA <t> (SignExt16to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt16to64 y)))))
(Rsh16x32 <t> x y) -> (SRA <t> (SignExt16to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt32to64 y)))))
(Rsh16x64 <t> x y) -> (SRA <t> (SignExt16to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] y))))
(Rsh32x8  <t> x y) -> (SRA <t> (SignExt32to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt8to64  y)))))
(Rsh32x16 <t> x y) -> (SRA <t> (SignExt32to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt16to64 y)))))
(Rsh32x32 <t> x y) -> (SRA <t> (SignExt32to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt32to64 y)))))
(Rsh32x64 <t> x y) -> (SRA <t> (SignExt32to64 x) (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] y))))
(Rsh64x8  <t> x y) -> (SRA <t> x                 (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt8to64  y)))))
(Rsh64x16 <t> x y) -> (SRA <t> x                 (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt16to64 y)))))
(Rsh64x32 <t> x y) -> (SRA <t> x                 (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] (ZeroExt32to64 y)))))
(Rsh64x64 <t> x y) -> (SRA <t> x                 (OR <y.Type> y (ADDI <y.Type> [-1] (SLTIU <y.Type> [64] y))))

(Less64  x y) -> (SLT  x y)
(Less32  x y) -> (SLT  (SignExt32to64 x) (SignExt32to64 y))
(Less16  x y) -> (SLT  (SignExt16to64 x) (SignExt16to64 y))
(Less8   x y) -> (SLT  (SignExt8to64  x) (SignExt8to64  y))
(Less64U x y) -> (SLTU x y)
(Less32U x y) -> (SLTU (ZeroExt32to64 x) (ZeroExt32to64 y))
(Less16U x y) -> (SLTU (ZeroExt16to64 x) (ZeroExt16to64 y))
(Less8U  x y) -> (SLTU (ZeroExt8to64  x) (ZeroExt8to64  y))
(Less64F x y) -> (FLTD x y)
(Less32F x y) -> (FLTS x y)

// Convert x <= y to !(y > x).
(Leq64  x y) -> (Not (Less64  y x))
(Leq32  x y) -> (Not (Less32  y x))
(Leq16  x y) -> (Not (Less16  y x))
(Leq8   x y) -> (Not (Less8   y x))
(Leq64U x y) -> (Not (Less64U y x))
(Leq32U x y) -> (Not (Less32U y x))
(Leq16U x y) -> (Not (Less16U y x))
(Leq8U  x y) -> (Not (Less8U  y x))
(Leq64F x y) -> (FLED x y)
(Leq32F x y) -> (FLES x y)

// Convert x > y to y < x.
(Greater64  x y) -> (Less64  y x)
(Greater32  x y) -> (Less32  y x)
(Greater16  x y) -> (Less16  y x)
(Greater8   x y) -> (Less8   y x)
(Greater64U x y) -> (Less64U y x)
(Greater32U x y) -> (Less32U y x)
(Greater16U x y) -> (Less16U y x)
(Greater8U  x y) -> (Less8U  y x)
(Greater64F x y) -> (FLTD y x)
(Greater32F x y) -> (FLTS y x)

// Convert x >= y to !(x < y)
(Geq64  x y) -> (Not (Less64  x y))
(Geq32  x y) -> (Not (Less32  x y))
(Geq16  x y) -> (Not (Less16  x y))
(Geq8   x y) -> (Not (Less8   x y))
(Geq64U x y) -> (Not (Less64U x y))
(Geq32U x y) -> (Not (Less32U x y))
(Geq16U x y) -> (Not (Less16U x y))
(Geq8U  x y) -> (Not (Less8U  x y))
(Geq64F x y) -> (FLED y x)
(Geq32F x y) -> (FLES y x)

// We do it this way because there is a high likelihood the extension can be elided
// TODO(sorear): Can this be made conditional on indicators of that likelihood?
(EqPtr x y) -> (SEQZ (SUB <x.Type> x y))
(Eq64  x y) -> (SEQZ (SUB <x.Type> x y))
(Eq32  x y) &&  isSigned(x.Type) -> (SEQZ (SUB <config.fe.TypeInt64()>  (SignExt32to64 x) (SignExt32to64 y)))
(Eq32  x y) && !isSigned(x.Type) -> (SEQZ (SUB <config.fe.TypeUInt64()> (ZeroExt32to64 x) (ZeroExt32to64 y)))
(Eq16  x y) &&  isSigned(x.Type) -> (SEQZ (SUB <config.fe.TypeInt64()>  (SignExt16to64 x) (SignExt16to64 y)))
(Eq16  x y) && !isSigned(x.Type) -> (SEQZ (SUB <config.fe.TypeUInt64()> (ZeroExt16to64 x) (ZeroExt16to64 y)))
(Eq8   x y) &&  isSigned(x.Type) -> (SEQZ (SUB <config.fe.TypeInt64()>  (SignExt8to64 x) (SignExt8to64 y)))
(Eq8   x y) && !isSigned(x.Type) -> (SEQZ (SUB <config.fe.TypeUInt64()> (ZeroExt8to64 x) (ZeroExt8to64 y)))
(Eq64F x y) -> (FEQD x y)
(Eq32F x y) -> (FEQS x y)

(NeqPtr x y) -> (SNEZ (SUB <x.Type> x y))
(Neq64  x y) -> (SNEZ (SUB <x.Type> x y))
(Neq32  x y) &&  isSigned(x.Type) -> (SNEZ (SUB <config.fe.TypeInt64()>  (SignExt32to64 x) (SignExt32to64 y)))
(Neq32  x y) && !isSigned(x.Type) -> (SNEZ (SUB <config.fe.TypeUInt64()> (ZeroExt32to64 x) (ZeroExt32to64 y)))
(Neq16  x y) &&  isSigned(x.Type) -> (SNEZ (SUB <config.fe.TypeInt64()>  (SignExt16to64 x) (SignExt16to64 y)))
(Neq16  x y) && !isSigned(x.Type) -> (SNEZ (SUB <config.fe.TypeUInt64()> (ZeroExt16to64 x) (ZeroExt16to64 y)))
(Neq8   x y) &&  isSigned(x.Type) -> (SNEZ (SUB <config.fe.TypeInt64()>  (SignExt8to64 x) (SignExt8to64 y)))
(Neq8   x y) && !isSigned(x.Type) -> (SNEZ (SUB <config.fe.TypeUInt64()> (ZeroExt8to64 x) (ZeroExt8to64 y)))
(Neq64F x y) -> (FNED x y)
(Neq32F x y) -> (FNES x y)

// Loads
(Load <t> ptr mem) &&  t.IsBoolean()                  -> (MOVBUload ptr mem)
(Load <t> ptr mem) && ( is8BitInt(t) &&  isSigned(t)) -> (MOVBload  ptr mem)
(Load <t> ptr mem) && ( is8BitInt(t) && !isSigned(t)) -> (MOVBUload ptr mem)
(Load <t> ptr mem) && (is16BitInt(t) &&  isSigned(t)) -> (MOVHload  ptr mem)
(Load <t> ptr mem) && (is16BitInt(t) && !isSigned(t)) -> (MOVHUload ptr mem)
(Load <t> ptr mem) && (is32BitInt(t) &&  isSigned(t)) -> (MOVWload  ptr mem)
(Load <t> ptr mem) && (is32BitInt(t) && !isSigned(t)) -> (MOVWUload ptr mem)
(Load <t> ptr mem) && (is64BitInt(t) || isPtr(t))     -> (MOVDload  ptr mem)
(Load <t> ptr mem) &&  is32BitFloat(t)                -> (FMOVWload ptr mem)
(Load <t> ptr mem) &&  is64BitFloat(t)                -> (FMOVDload ptr mem)

// Stores
(Store [1] ptr val mem)                            -> (MOVBstore ptr val mem)
(Store [2] ptr val mem)                            -> (MOVHstore ptr val mem)
(Store [4] ptr val mem) && !is32BitFloat(val.Type) -> (MOVWstore ptr val mem)
(Store [8] ptr val mem) && !is64BitFloat(val.Type) -> (MOVDstore ptr val mem)
(Store [4] ptr val mem) &&  is32BitFloat(val.Type) -> (FMOVWstore ptr val mem)
(Store [8] ptr val mem) &&  is64BitFloat(val.Type) -> (FMOVDstore ptr val mem)

// We need to fold MOVaddr into the LD/MOVDstore ops so that the live variable analysis
// knows what variables are being read/written by the ops.
(MOVBUload [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVBUload [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVBload  [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVBload  [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVHUload [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVHUload [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVHload  [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVHload  [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVWUload [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVWUload [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVWload  [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVWload  [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVDload  [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVDload  [off1+off2] {mergeSym(sym1,sym2)} base mem)

(MOVBstore [off1] {sym1} (MOVaddr [off2] {sym2} base) val mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVBstore [off1+off2] {mergeSym(sym1,sym2)} base val mem)
(MOVHstore [off1] {sym1} (MOVaddr [off2] {sym2} base) val mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVHstore [off1+off2] {mergeSym(sym1,sym2)} base val mem)
(MOVWstore [off1] {sym1} (MOVaddr [off2] {sym2} base) val mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVWstore [off1+off2] {mergeSym(sym1,sym2)} base val mem)
(MOVDstore [off1] {sym1} (MOVaddr [off2] {sym2} base) val mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVDstore [off1+off2] {mergeSym(sym1,sym2)} base val mem)

(MOVBstorezero [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVBstorezero [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVHstorezero [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVHstorezero [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVWstorezero [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVWstorezero [off1+off2] {mergeSym(sym1,sym2)} base mem)
(MOVDstorezero [off1] {sym1} (MOVaddr [off2] {sym2} base) mem) && is32Bit(off1+off2) && canMergeSym(sym1, sym2) ->
	(MOVDstorezero [off1+off2] {mergeSym(sym1,sym2)} base mem)

(MOVBUload [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVBUload [off1+off2] {sym} base mem)
(MOVBload  [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVBload  [off1+off2] {sym} base mem)
(MOVHUload [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVHUload [off1+off2] {sym} base mem)
(MOVHload  [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVHload  [off1+off2] {sym} base mem)
(MOVWUload [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVWUload [off1+off2] {sym} base mem)
(MOVWload  [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVWload  [off1+off2] {sym} base mem)
(MOVDload  [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVDload  [off1+off2] {sym} base mem)

(MOVBstore [off1] {sym} (ADDI [off2] base) val mem) && is32Bit(off1+off2) ->
	(MOVBstore [off1+off2] {sym} base val mem)
(MOVHstore [off1] {sym} (ADDI [off2] base) val mem) && is32Bit(off1+off2) ->
	(MOVHstore [off1+off2] {sym} base val mem)
(MOVWstore [off1] {sym} (ADDI [off2] base) val mem) && is32Bit(off1+off2) ->
	(MOVWstore [off1+off2] {sym} base val mem)
(MOVDstore [off1] {sym} (ADDI [off2] base) val mem) && is32Bit(off1+off2) ->
	(MOVDstore [off1+off2] {sym} base val mem)

(MOVBstorezero [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVBstorezero [off1+off2] {sym} base mem)
(MOVHstorezero [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVHstorezero [off1+off2] {sym} base mem)
(MOVWstorezero [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVWstorezero [off1+off2] {sym} base mem)
(MOVDstorezero [off1] {sym} (ADDI [off2] base) mem) && is32Bit(off1+off2) ->
	(MOVDstorezero [off1+off2] {sym} base mem)

// store zero
(MOVBstore [off] {sym} ptr (MOVDconst [0]) mem) -> (MOVBstorezero [off] {sym} ptr mem)
(MOVHstore [off] {sym} ptr (MOVDconst [0]) mem) -> (MOVHstorezero [off] {sym} ptr mem)
(MOVWstore [off] {sym} ptr (MOVDconst [0]) mem) -> (MOVWstorezero [off] {sym} ptr mem)
(MOVDstore [off] {sym} ptr (MOVDconst [0]) mem) -> (MOVDstorezero [off] {sym} ptr mem)

// don't extend after proper load
// TODO(sorear): do we need a type shim like the ARM port does?  Rematerialization should be safe here since it can only make the result more type-extended.
(ADDIW [0]            x:(MOVBload _ _))  && isSigned(x.Type) -> x
(SRAI [48] (SLLI [48] x:(MOVBload _ _))) && isSigned(x.Type) -> x
(SRAI [56] (SLLI [56] x:(MOVBload _ _))) && isSigned(x.Type) -> x
(ADDIW [0]            x:(MOVHload _ _))  && isSigned(x.Type) -> x
(SRAI [48] (SLLI [48] x:(MOVHload _ _))) && isSigned(x.Type) -> x
(ADDIW [0]            x:(MOVWload _ _))  && isSigned(x.Type) -> x

(SRLI [32] (SLLI [32] x:(MOVBUload _ _))) && !isSigned(x.Type) -> x
(SRLI [48] (SLLI [48] x:(MOVBUload _ _))) && !isSigned(x.Type) -> x
(ANDI [255]           x:(MOVBUload _ _))  && !isSigned(x.Type) -> x
(SRLI [32] (SLLI [32] x:(MOVHUload _ _))) && !isSigned(x.Type) -> x
(SRLI [48] (SLLI [48] x:(MOVHUload _ _))) && !isSigned(x.Type) -> x
(SRLI [32] (SLLI [32] x:(MOVWUload _ _))) && !isSigned(x.Type) -> x

// Similarly, fold ADDI into MOVaddr to avoid confusing live variable analysis
// with OffPtr -> ADDI.
(ADDI [c] (MOVaddr [d] {s} x)) && is32Bit(c+d) -> (MOVaddr [c+d] {s} x)

// fold constant into arithmatic ops
(ADD (MOVDconst [c]) x) -> (ADDI [c] x)
(ADD x (MOVDconst [c])) -> (ADDI [c] x)
(SUB x (MOVDconst [c])) -> (ADDI [-c] x)
(SEQZ (SUB <t> (MOVDconst [c]) x)) -> (SEQZ (ADDI <t> [-c] x))
(SNEZ (SUB <t> (MOVDconst [c]) x)) -> (SNEZ (ADDI <t> [-c] x))
(AND (MOVDconst [c]) x) -> (ANDI [c] x)
(AND x (MOVDconst [c])) -> (ANDI [c] x)
(OR  (MOVDconst [c]) x) -> (ORI [c] x)
(OR  x (MOVDconst [c])) -> (ORI [c] x)
(XOR (MOVDconst [c]) x) -> (XORI [c] x)
(XOR x (MOVDconst [c])) -> (XORI [c] x)

// mul by constant
(MUL x (MOVDconst [-1])) -> (NEG x)
(MUL _ (MOVDconst [0])) -> (MOVDconst [0])
(MUL x (MOVDconst [1])) -> x
(MUL x (MOVDconst [c])) && isPowerOfTwo(c) -> (SLLI [log2(c)] x)

(MUL (MOVDconst [-1]) x) -> (NEG x)
(MUL (MOVDconst [0]) _) -> (MOVDconst [0])
(MUL (MOVDconst [1]) x) -> x
(MUL (MOVDconst [c]) x) && isPowerOfTwo(c) -> (SLLI [log2(c)] x)
(MUL (MOVDconst [c]) x) && isPowerOfTwo(c) -> (SLLI [log2(c)] x)

// remove redundant *const ops
(ADDI [0]  x) -> x
(ANDI [0]  _) -> (MOVDconst [0])
(ANDI [-1] x) -> x
(ORI  [0]  x) -> x
(ORI  [-1] _) -> (MOVDconst [-1])
(XORI [0]  x) -> x

// generic constant folding
(ADDI [c] (MOVDconst [d]))  -> (MOVDconst [c+d])
(ADDI [c] (ADDI [d] x))     -> (ADDI [c+d] x)
(ADDIW [c] (MOVDconst [d]))  -> (MOVDconst [int64(int32(c+d))])
(ADDIW [c] (ADDI [d] x))     -> (ADDIW [c+d] x)
(SLLI [c] (MOVDconst [d]))  -> (MOVDconst [int64(d)<<uint64(c)])
(SRLI [c] (MOVDconst [d]))  -> (MOVDconst [int64(uint64(d)>>uint64(c))])
(SRAI [c] (MOVDconst [d]))  -> (MOVDconst [int64(d)>>uint64(c)])
(ANDI [c] (MOVDconst [d]))  -> (MOVDconst [c&d])
(ANDI [c] (ANDI [d] x))     -> (ANDI [c&d] x)
(ORI  [c] (MOVDconst [d]))  -> (MOVDconst [c|d])
(ORI  [c] (ORI [d] x))      -> (ORI [c|d] x)
(XORI [c] (MOVDconst [d]))  -> (MOVDconst [c^d])
(SLTIU [c] (MOVDconst [d])) && uint64(d) < uint64(c) -> (MOVDconst [1])
(SLTIU [c] (MOVDconst [d])) && uint64(d) >= uint64(c) -> (MOVDconst [0])
(SLTI [c] (MOVDconst [d])) && int64(d) < int64(c) -> (MOVDconst [1])
(SLTI [c] (MOVDconst [d])) && int64(d) >= int64(c) -> (MOVDconst [0])
(XORI [c] (XORI [d] x))     -> (XORI [c^d] x)
(NEG (MOVDconst [c]))       -> (MOVDconst [-c])

// Zeroing
// TODO: more optimized zeroing, including attempting to use aligned accesses.
(Zero [s]   _ mem) && SizeAndAlign(s).Size() == 0 -> mem
(Zero [s] ptr mem) && SizeAndAlign(s).Size() == 1 -> (MOVBstore ptr (MOVDconst) mem)
(Zero [s] ptr mem) && SizeAndAlign(s).Size() == 2 -> (MOVHstore ptr (MOVDconst) mem)
(Zero [s] ptr mem) && SizeAndAlign(s).Size() == 4 -> (MOVWstore ptr (MOVDconst) mem)
(Zero [s] ptr mem) && SizeAndAlign(s).Size() == 8 -> (MOVDstore ptr (MOVDconst) mem)

// Generic zeroing uses a loop
(Zero [s] ptr mem) ->
	(LoweredZero [SizeAndAlign(s).Align()]
		ptr
		(ADD <ptr.Type> ptr (MOVDconst [SizeAndAlign(s).Size()-moveSize(SizeAndAlign(s).Align(), config)]))
		mem)

(Convert x mem) -> (MOVconvert x mem)

// Checks
(IsNonNil p) -> (NeqPtr (MOVDconst) p)
(IsInBounds idx len) -> (Less64U idx len)
(IsSliceInBounds idx len) -> (Leq64U idx len)

// Trivial lowering
(NilCheck ptr mem) -> (LoweredNilCheck ptr mem)
(GetClosurePtr) -> (LoweredGetClosurePtr)

// Moves
// TODO: more optimized moves, including attempting to use aligned accesses.
(Move [s]   _   _ mem) && SizeAndAlign(s).Size() == 0 -> mem
(Move [s] dst src mem) && SizeAndAlign(s).Size() == 1 -> (MOVBstore dst (MOVBload src mem) mem)
(Move [s] dst src mem) && SizeAndAlign(s).Size() == 2 -> (MOVHstore dst (MOVHload src mem) mem)
(Move [s] dst src mem) && SizeAndAlign(s).Size() == 4 -> (MOVWstore dst (MOVWload src mem) mem)
(Move [s] dst src mem) && SizeAndAlign(s).Size() == 8 -> (MOVDstore dst (MOVDload src mem) mem)

// Generic move uses a loop
(Move [s] dst src mem) ->
	(LoweredMove [SizeAndAlign(s).Align()]
		dst
		src
		(ADDI <src.Type> [SizeAndAlign(s).Size()-moveSize(SizeAndAlign(s).Align(), config)] src)
		mem)

// Boolean ops; 0=false, 1=true
(AndB x y) -> (AND  x y)
(OrB  x y) -> (OR   x y)
(EqB  x y) -> (Eq8  x y)
(NeqB x y) -> (Neq8 x y)
(Not  x)   -> (XORI [1] x)

// TODO: Special handling for SP offsets, like ARM
(OffPtr [off] ptr:(SP)) -> (MOVaddr [off] ptr)
(OffPtr [off] ptr) -> (ADDI [off] ptr)

(Const8 [val]) -> (MOVDconst [val])
(Const16 [val]) -> (MOVDconst [val])
(Const32 [val]) -> (MOVDconst [val])
(Const64 [val]) -> (MOVDconst [val])
(Const32F [val]) -> (FMVSX (MOVSconst [val]))
(Const64F [val]) -> (FMVDX (MOVDconst [val]))
(ConstNil) -> (MOVDconst [0])
(ConstBool [b]) -> (MOVDconst [b])


(Addr {sym} base) -> (MOVaddr {sym} base)

// Conditional branches
//
// cond is 1 if true. BNE compares against 0.

(If cond yes no) -> (BNE (COMPAREregzero cond) yes no)

// Absorb NOT into boolean branches
(BNE (COMPAREregzero (XORI [1] cond)) yes no) -> (BEQ (COMPAREregzero cond) yes no)
(BEQ (COMPAREregzero (XORI [1] cond)) yes no) -> (BNE (COMPAREregzero cond) yes no)

// Absorb comparisons into boolean branches
(BNE (COMPAREregzero (SLT x y)) yes no) -> (BLT (COMPARE x y) yes no)
(BNE (COMPAREregzero (SLTU x y)) yes no) -> (BLTU (COMPARE x y) yes no)
(BNE (COMPAREregzero (SEQZ (SUB x y))) yes no) -> (BEQ (COMPARE x y) yes no)
(BNE (COMPAREregzero (SNEZ (SUB x y))) yes no) -> (BNE (COMPARE x y) yes no)
(BNE (COMPAREregzero (SEQZ x)) yes no) -> (BEQ (COMPAREregzero x) yes no)
(BNE (COMPAREregzero (SNEZ x)) yes no) -> (BNE (COMPAREregzero x) yes no)

(BEQ (COMPAREregzero (SLT x y)) yes no) -> (BGE (COMPARE x y) yes no)
(BEQ (COMPAREregzero (SLTU x y)) yes no) -> (BGEU (COMPARE x y) yes no)
(BEQ (COMPAREregzero (SEQZ (SUB x y))) yes no) -> (BNE (COMPARE x y) yes no)
(BEQ (COMPAREregzero (SNEZ (SUB x y))) yes no) -> (BEQ (COMPARE x y) yes no)
(BEQ (COMPAREregzero (SEQZ x)) yes no) -> (BNE (COMPAREregzero x) yes no)
(BEQ (COMPAREregzero (SNEZ x)) yes no) -> (BEQ (COMPAREregzero x) yes no)

// Absorb constant zero into comparisons
(COMPARE x (MOVDconst [0])) -> (COMPAREregzero x)
(COMPARE (MOVDconst [0]) x) -> (COMPAREzeroreg x)

// Canonical form of BEQZ/BNEZ
(BNE (COMPAREzeroreg x) yes no) -> (BNE (COMPAREregzero x) yes no)
(BEQ (COMPAREzeroreg x) yes no) -> (BEQ (COMPAREregzero x) yes no)

// Calls
(StaticCall  [argwid] {target}      mem) -> (CALLstatic  [argwid] {target}      mem)
(ClosureCall [argwid] entry closure mem) -> (CALLclosure [argwid] entry closure mem)
(DeferCall   [argwid]               mem) -> (CALLdefer   [argwid]               mem)
(GoCall      [argwid]               mem) -> (CALLgo      [argwid]               mem)
(InterCall   [argwid] entry         mem) -> (CALLinter   [argwid] entry         mem)
